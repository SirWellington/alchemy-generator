/*
 * Copyright 2015 SirWellington Tech.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package tech.sirwellington.alchemy.generator;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import static tech.sirwellington.alchemy.generator.Checks.Internal.checkNotNull;
import static tech.sirwellington.alchemy.generator.Checks.Internal.checkThat;
import static tech.sirwellington.alchemy.generator.NumberGenerators.integers;

/**
 *
 * @author SirWellington
 */
public final class CollectionGenerators
{

    private final static Logger LOG = LoggerFactory.getLogger(CollectionGenerators.class);

    private CollectionGenerators() throws IllegalAccessException
    {
        throw new IllegalAccessException("cannot instantiate this class");
    }

    /**
     * Returns a list of Data using the specified generator of varying size.
     *
     * @param <T>
     * @param generator The generator that produces values
     *
     * @return A list of random values, the length of which will vary.
     */
    static <T> List<T> listOf(AlchemyGenerator<T> generator)
    {
        return listOf(generator, integers(5, 200).get());
    }

    /**
     * Retrieves a list of Data using the specified generator.
     *
     * @param <T>       The type to generate
     * @param generator The generator that produces values
     * @param size      The size of the list
     *
     * @return A list of random values with length {code size}
     *
     * @throws IllegalArgumentException if size is less than 1.
     */
    static <T> List<T> listOf(AlchemyGenerator<T> generator, int size)
    {
        checkThat(size > 0, "Size must be at least 1");
        checkNotNull(generator, "generator is null");
        List<T> list = new ArrayList<>(size);
        for (int i = 0; i < size; ++i)
        {
            list.add(generator.get());
        }
        return list;
    }

    /**
     * Creates a Map using the Keys and Values generated by the provided Generators.
     *
     * @param <K>            The Type of the Keys
     * @param <V>            The Type of the Values
     *
     * @param keyGenerator   Generates keys for the Map
     * @param valueGenerator Generates values for the Map
     * @param size           The exact size of the created map
     *
     * @return Map generated from the parameters specified.√è
     */
    static <K, V> Map<K, V> mapOf(AlchemyGenerator<K> keyGenerator, AlchemyGenerator<V> valueGenerator, int size)
    {
        checkThat(size > 0, "size must be at least 1");
        checkNotNull(keyGenerator);
        checkNotNull(valueGenerator);
        Map<K, V> map = new HashMap<>(size);

        for (int i = 0; i < size; ++i)
        {
            K key = keyGenerator.get();
            V vaue = valueGenerator.get();
            map.put(key, vaue);
        }

        return map;
    }
}
